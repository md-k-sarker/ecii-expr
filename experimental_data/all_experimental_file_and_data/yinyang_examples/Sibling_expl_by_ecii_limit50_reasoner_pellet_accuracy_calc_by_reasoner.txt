Program started.............
Program starts at: 09.04.2018  04.30.56 AM
Working with confFile: Sibling.config
Algorithm starts at: 09.04.2018  04.30.56 AM

User defined parameters:
K1/negExprTypeLimit: 3
K2/hornClauseLimit: 3
K3/objPropsCombinationLimit: 3
K4/hornClausesListMaxSize: 50
K5/candidateClassesListMaxSize: 50
ReasonerName: pellet
posIndivs from conf:
	Francesco
	Ombretta
	Dino
	Luigi
	Maria
	Serena
	Anna
negIndivs from conf:
	Luca
	Gianni
	Dora

Algorithm ends at: 09.04.2018  04.30.56 AM

Algorithm duration: 0.112 sec

####################Solutions####################:
solution 1: (Person)
	solution from reasoner: Person
	 coverage_score: 0.7
	 coverage_score_by_reasoner: 1.0
	 f_measure: 0.8235294117647058
	 f_measure_by_reasoner: 1.0
solution 2: ∃hasSibling.(Person)
	solution from reasoner: ∃ hasSibling.Person
	 coverage_score: 0.7
	 coverage_score_by_reasoner: 0.7
	 f_measure: 0.8235294117647058
	 f_measure_by_reasoner: 0.8235294117647058
solution 3: ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Person)
	 coverage_score: 0.7
	 coverage_score_by_reasoner: 0.7
	 f_measure: 0.8235294117647058
	 f_measure_by_reasoner: 0.8235294117647058
solution 4: ((Male) ⊔ (Female))
	solution from reasoner: Female ⊔ Male
	 coverage_score: 0.7
	 coverage_score_by_reasoner: 1.0
	 f_measure: 0.8235294117647058
	 f_measure_by_reasoner: 1.0
solution 5: ((Male) ⊔ (Person))
	solution from reasoner: Male ⊔ Person
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 6: (Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 7: ((Female) ⊔ (Person))
	solution from reasoner: Female ⊔ Person
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 8: ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Male)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 9: ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ∃ hasSibling.(Male ⊔ Person)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 10: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 11: ((Person) ⊔ (Male) ⊔ (Female))
	solution from reasoner: Female ⊔ Male ⊔ Person
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 12: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 13: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 14: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 15: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 16: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 17: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 18: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 19: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 20: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 21: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 22: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 23: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 24: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 25: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 26: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 27: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 28: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 29: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 30: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 31: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 32: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 33: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 34: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 35: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.7
	 f_measure: 0.8235294117647058
solution 36: ∃hasParent.(Male)
	solution from reasoner: ∃ hasParent.Male
	 coverage_score: 0.6
	 f_measure: 0.75
solution 37: ∃hasParent.(Female)
	solution from reasoner: ∃ hasParent.Female
	 coverage_score: 0.6
	 f_measure: 0.75
solution 38: ∃hasParent.(Person)
	solution from reasoner: ∃ hasParent.Person
	 coverage_score: 0.6
	 f_measure: 0.75
solution 39: ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 40: (Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ (∃ hasParent.Male)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 41: ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ∃ hasParent.(Female ⊔ Male)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 42: ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 43: ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ∃ hasParent.(Male ⊔ Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 44: (Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ (∃ hasParent.Female)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 45: (Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ (∃ hasParent.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 46: ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 47: ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ∃ hasParent.(Female ⊔ Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 48: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 49: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 50: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 51: ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 52: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 53: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 54: ((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 55: ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ∃ hasParent.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 56: (Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 57: ((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 58: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 59: ((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 60: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 61: ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 62: ((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 63: ((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 64: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 65: ((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 66: (Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 67: ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 68: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 69: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 70: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 71: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 72: (Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 73: ((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 74: ((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 75: ((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 76: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 77: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 78: ((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 79: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 80: (Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 81: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 82: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 83: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 84: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 85: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 86: ((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 87: ((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 88: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 89: ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 90: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 91: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 92: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 93: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 94: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 95: ((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 96: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 97: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 98: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 99: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 100: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 101: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 102: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 103: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 104: ((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 105: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.6
	 f_measure: 0.75
solution 106: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 107: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 108: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 109: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 110: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 111: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 112: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 113: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 114: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 115: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 116: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 117: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 118: ((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 119: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 120: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 121: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 122: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 123: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 124: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 125: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 126: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 127: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 128: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 129: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 130: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 131: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 132: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 133: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 134: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 135: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 136: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 137: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 138: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 139: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 140: ((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 141: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 142: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 143: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 144: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 145: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 146: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 147: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 148: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 149: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 150: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 151: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 152: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 153: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 154: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 155: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 156: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 157: ((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 158: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 159: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 160: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 161: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 162: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 163: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 164: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 165: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 166: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 167: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 168: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 169: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 170: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 171: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 172: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 173: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 174: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 175: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 176: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 177: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 178: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 179: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 180: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 181: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 182: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 183: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 184: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 185: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 186: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 187: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 188: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 189: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 190: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 191: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 192: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 193: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 194: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 195: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 196: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 197: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 198: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 199: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 200: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 201: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 202: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 203: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 204: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 205: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 206: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 207: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 208: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 209: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 210: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 211: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 212: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 213: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 214: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 215: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 216: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 217: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 218: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 219: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 220: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 221: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 222: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 223: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 224: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 225: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 226: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 227: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 228: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 229: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 230: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 231: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 232: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 233: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 234: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 235: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 236: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 237: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 238: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 239: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 240: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 241: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 242: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 243: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 244: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 245: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 246: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 247: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 248: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 249: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 250: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 251: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 252: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 253: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 254: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 255: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 256: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 257: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 258: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 259: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 260: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 261: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 262: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 263: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 264: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 265: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 266: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 267: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 268: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 269: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 270: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 271: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 272: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 273: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 274: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 275: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 276: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 277: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 278: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 279: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 280: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 281: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 282: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 283: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 284: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 285: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 286: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 287: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.6
	 f_measure: 0.75
solution 288: ∃hasSibling.(Female)
	solution from reasoner: ∃ hasSibling.Female
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 289: ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 290: (Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 291: ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 292: ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 293: ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 294: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 295: ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 296: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 297: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 298: ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 299: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 300: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 301: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 302: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 303: ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 304: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 305: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 306: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 307: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 308: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 309: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 310: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 311: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 312: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 313: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 314: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 315: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 316: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 317: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 318: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 319: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 320: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 321: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 322: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 323: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 324: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 325: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 326: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 327: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 328: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 329: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 330: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 331: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 332: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 333: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 334: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 335: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.5
	 f_measure: 0.6666666666666666
solution 336: ∃hasSibling.(Male)
	solution from reasoner: ∃ hasSibling.Male
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 337: (Female)
	solution from reasoner: Female
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 338: (Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 339: (Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 340: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 341: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 342: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 343: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 344: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 345: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 346: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 347: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.4
	 f_measure: 0.5714285714285714
solution 348: ∃hasChild.(Female)
	solution from reasoner: ∃ hasChild.Female
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 349: ∃hasChild.(Person)
	solution from reasoner: ∃ hasChild.Person
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 350: (Male)
	solution from reasoner: Male
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 351: ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: ∃ hasChild.(Female ⊔ Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 352: ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 353: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 354: (Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 355: (Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 356: (Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 357: (Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Female ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 358: ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 359: ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 360: ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: ∃ hasChild.(Male ⊔ Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 361: (Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 362: (Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 363: (Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 364: ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 365: ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 366: (Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 367: ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 368: (Person) ⊓ ∃hasChild.(Female)
	solution from reasoner: Person ⊓ (∃ hasChild.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 369: ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: ∃ hasChild.(Female ⊔ Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 370: ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 371: ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 372: ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 373: (Person) ⊓ ∃hasChild.(Person)
	solution from reasoner: Person ⊓ (∃ hasChild.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 374: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 375: (Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 376: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 377: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 378: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 379: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 380: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 381: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 382: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 383: ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 384: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 385: ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 386: ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 387: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 388: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 389: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 390: ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 391: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 392: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 393: (Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 394: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: Person ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 395: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 396: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 397: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 398: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 399: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 400: ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 401: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 402: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 403: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 404: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 405: (Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 406: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 407: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 408: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: ∃ hasChild.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 409: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 410: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 411: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 412: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 413: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 414: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 415: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 416: (Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 417: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 418: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 419: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 420: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 421: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 422: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 423: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 424: ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 425: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 426: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 427: (Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 428: (Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 429: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 430: ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 431: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 432: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 433: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 434: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 435: ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 436: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 437: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 438: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 439: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 440: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: Person ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 441: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 442: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 443: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 444: ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 445: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 446: (Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 447: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 448: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 449: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 450: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 451: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 452: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 453: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 454: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 455: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 456: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 457: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 458: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 459: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 460: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 461: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 462: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 463: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 464: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 465: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 466: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 467: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 468: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 469: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 470: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 471: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 472: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 473: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 474: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 475: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 476: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 477: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 478: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 479: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 480: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 481: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 482: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 483: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 484: ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 485: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 486: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 487: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 488: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 489: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 490: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 491: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 492: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 493: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 494: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 495: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 496: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 497: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 498: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 499: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 500: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 501: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 502: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 503: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 504: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 505: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 506: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 507: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 508: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 509: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 510: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 511: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 512: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 513: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 514: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 515: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 516: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 517: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 518: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 519: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 520: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 521: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 522: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 523: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 524: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 525: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 526: ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 527: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 528: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 529: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 530: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 531: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 532: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 533: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 534: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 535: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 536: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 537: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 538: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 539: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 540: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 541: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 542: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 543: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 544: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 545: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 546: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 547: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 548: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 549: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 550: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 551: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 552: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 553: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 554: ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 555: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 556: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 557: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 558: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 559: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 560: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 561: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 562: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 563: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 564: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 565: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 566: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 567: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 568: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 569: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 570: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 571: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 572: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 573: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 574: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 575: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 576: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 577: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 578: (Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 579: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 580: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 581: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 582: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 583: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 584: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 585: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 586: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 587: (Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 588: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 589: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 590: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 591: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 592: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 593: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 594: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 595: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 596: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 597: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 598: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 599: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 600: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 601: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 602: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 603: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 604: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 605: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 606: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 607: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 608: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 609: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 610: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 611: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 612: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 613: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 614: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 615: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 616: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 617: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 618: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 619: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 620: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 621: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 622: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 623: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 624: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 625: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 626: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 627: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 628: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 629: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 630: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 631: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 632: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 633: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 634: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 635: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 636: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 637: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 638: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 639: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 640: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 641: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 642: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 643: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 644: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 645: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 646: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 647: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 648: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 649: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 650: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 651: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 652: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 653: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 654: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 655: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 656: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 657: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 658: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 659: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 660: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 661: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 662: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 663: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 664: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 665: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 666: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 667: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 668: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 669: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 670: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 671: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 672: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 673: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 674: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 675: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 676: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 677: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 678: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 679: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 680: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 681: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 682: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 683: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 684: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 685: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 686: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 687: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 688: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 689: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 690: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 691: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 692: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 693: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 694: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 695: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 696: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 697: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 698: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 699: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 700: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 701: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 702: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 703: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 704: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 705: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 706: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 707: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 708: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 709: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 710: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 711: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 712: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 713: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 714: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 715: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 716: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 717: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 718: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 719: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 720: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 721: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 722: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 723: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 724: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 725: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 726: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 727: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 728: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 729: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 730: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 731: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 732: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 733: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 734: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 735: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 736: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 737: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 738: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 739: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 740: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 741: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 742: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 743: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 744: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 745: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 746: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 747: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 748: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 749: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 750: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 751: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 752: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 753: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 754: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 755: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 756: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 757: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 758: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 759: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 760: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 761: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 762: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 763: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 764: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 765: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 766: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 767: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 768: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 769: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 770: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 771: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 772: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 773: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 774: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 775: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 776: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 777: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 778: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 779: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 780: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 781: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 782: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 783: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 784: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 785: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 786: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 787: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 788: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 789: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 790: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 791: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 792: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 793: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 794: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 795: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 796: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 797: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 798: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 799: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 800: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 801: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 802: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 803: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 804: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 805: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 806: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 807: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 808: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 809: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 810: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 811: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 812: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 813: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 814: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 815: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 816: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 817: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 818: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 819: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 820: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 821: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 822: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 823: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 824: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 825: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 826: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 827: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 828: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 829: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 830: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 831: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 832: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 833: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 834: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 835: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 836: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 837: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 838: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 839: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 840: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 841: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 842: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 843: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 844: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 845: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 846: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 847: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 848: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 849: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 850: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 851: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 852: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 853: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 854: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 855: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 856: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 857: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 858: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 859: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 860: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 861: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 862: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 863: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 864: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 865: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 866: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 867: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 868: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 869: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 870: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 871: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 872: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 873: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 874: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 875: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 876: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 877: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 878: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 879: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 880: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 881: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 882: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 883: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 884: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 885: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 886: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 887: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 888: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 889: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 890: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 891: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 892: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 893: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 894: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 895: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 896: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 897: ((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 898: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 899: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 900: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 901: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 902: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 903: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 904: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 905: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 906: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 907: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 908: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 909: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 910: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 911: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 912: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 913: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 914: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 915: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 916: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 917: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 918: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 919: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 920: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 921: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 922: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 923: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 924: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 925: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 926: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 927: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 928: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 929: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 930: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 931: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 932: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 933: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 934: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 935: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 936: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 937: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 938: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 939: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 940: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 941: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 942: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 943: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 944: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 945: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 946: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 947: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 948: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 949: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 950: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 951: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 952: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 953: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 954: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 955: ((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 956: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 957: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 958: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 959: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 960: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 961: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 962: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 963: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 964: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 965: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 966: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 967: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 968: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 969: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 970: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 971: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 972: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 973: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 974: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 975: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 976: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 977: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 978: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 979: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 980: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 981: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 982: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 983: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 984: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 985: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 986: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 987: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 988: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 989: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 990: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 991: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 992: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 993: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 994: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 995: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 996: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 997: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 998: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 999: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1000: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1001: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1002: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1003: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1004: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1005: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1006: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1007: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1008: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1009: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1010: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1011: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1012: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1013: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1014: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1015: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1016: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1017: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1018: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1019: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1020: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1021: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1022: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1023: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1024: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1025: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1026: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1027: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1028: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1029: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1030: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1031: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1032: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1033: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1034: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1035: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1036: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1037: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1038: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1039: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1040: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1041: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1042: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1043: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1044: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1045: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1046: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1047: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1048: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1049: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1050: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1051: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1052: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1053: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1054: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1055: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1056: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1057: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1058: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1059: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1060: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1061: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1062: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1063: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1064: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1065: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1066: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1067: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1068: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1069: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1070: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1071: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1072: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1073: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1074: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1075: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1076: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1077: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1078: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1079: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1080: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1081: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1082: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1083: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1084: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1085: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1086: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1087: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1088: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1089: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1090: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1091: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1092: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1093: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1094: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1095: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1096: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1097: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1098: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1099: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1100: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1101: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1102: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1103: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1104: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1105: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1106: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1107: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1108: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1109: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1110: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1111: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1112: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1113: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1114: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1115: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1116: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1117: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1118: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1119: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1120: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1121: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1122: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1123: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1124: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1125: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1126: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1127: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1128: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1129: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1130: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1131: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1132: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1133: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1134: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1135: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1136: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1137: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1138: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1139: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1140: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1141: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1142: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1143: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1144: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1145: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1146: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1147: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1148: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1149: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1150: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1151: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1152: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1153: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1154: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1155: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1156: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1157: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1158: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1159: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1160: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1161: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1162: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1163: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1164: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1165: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1166: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.3
	 f_measure: 0.4615384615384615
solution 1167: ∃hasChild.(Male)
	solution from reasoner: ∃ hasChild.Male
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1168: (Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1169: (Male) ⊓ ∃hasChild.(Female)
	solution from reasoner: Male ⊓ (∃ hasChild.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1170: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1171: ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1172: ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1173: (Person) ⊓ ∃hasChild.(Male)
	solution from reasoner: Person ⊓ (∃ hasChild.Male)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1174: (Male) ⊓ ∃hasChild.(Person)
	solution from reasoner: Male ⊓ (∃ hasChild.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1175: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1176: ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1177: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1178: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1179: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1180: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1181: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1182: ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1183: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1184: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1185: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1186: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1187: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1188: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1189: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1190: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: Male ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1191: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1192: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1193: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1194: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1195: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1196: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1197: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1198: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1199: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1200: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1201: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1202: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1203: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1204: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1205: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1206: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1207: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1208: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1209: ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1210: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1211: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1212: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1213: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1214: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1215: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1216: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1217: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1218: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1219: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1220: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1221: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1222: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1223: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1224: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1225: ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1226: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: Male ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1227: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1228: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1229: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1230: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1231: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1232: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1233: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1234: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1235: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1236: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1237: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1238: ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1239: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1240: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1241: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1242: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1243: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1244: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1245: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1246: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1247: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1248: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1249: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1250: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1251: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1252: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1253: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1254: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1255: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1256: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1257: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1258: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1259: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1260: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1261: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1262: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1263: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1264: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1265: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1266: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1267: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1268: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1269: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1270: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1271: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1272: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1273: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1274: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1275: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1276: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1277: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1278: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1279: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1280: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1281: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1282: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1283: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1284: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1285: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1286: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1287: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1288: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1289: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1290: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1291: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1292: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1293: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1294: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1295: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1296: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1297: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1298: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1299: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1300: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1301: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1302: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1303: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1304: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1305: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1306: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1307: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1308: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1309: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1310: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1311: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1312: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1313: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1314: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1315: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1316: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1317: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1318: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1319: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1320: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1321: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1322: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1323: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1324: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1325: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1326: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1327: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1328: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1329: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1330: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1331: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1332: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1333: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1334: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1335: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1336: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1337: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1338: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1339: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1340: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1341: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1342: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1343: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1344: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1345: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1346: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1347: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1348: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1349: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1350: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1351: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1352: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1353: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1354: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1355: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1356: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1357: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1358: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1359: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1360: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1361: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1362: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1363: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1364: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1365: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1366: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1367: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1368: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1369: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1370: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1371: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1372: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1373: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1374: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1375: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1376: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1377: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1378: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1379: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1380: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1381: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1382: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1383: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1384: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1385: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1386: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1387: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1388: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1389: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1390: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1391: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1392: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1393: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1394: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1395: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1396: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1397: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1398: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1399: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1400: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1401: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1402: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1403: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1404: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1405: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1406: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1407: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1408: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1409: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1410: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1411: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1412: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1413: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1414: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1415: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1416: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1417: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1418: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1419: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1420: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1421: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1422: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1423: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1424: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1425: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1426: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1427: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1428: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1429: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1430: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1431: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1432: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1433: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1434: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1435: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1436: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1437: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1438: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1439: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1440: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1441: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1442: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1443: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1444: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1445: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1446: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1447: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1448: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1449: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1450: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1451: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1452: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1453: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1454: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1455: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1456: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1457: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1458: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1459: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1460: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1461: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1462: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1463: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.2
	 f_measure: 0.3333333333333333
solution 1464: (Female) ⊓ ∃hasChild.(Male)
	solution from reasoner: Female ⊓ (∃ hasChild.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1465: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1466: (Female) ⊓ ∃hasChild.(Female)
	solution from reasoner: Female ⊓ (∃ hasChild.Female)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1467: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1468: (Female) ⊓ ∃hasChild.(Person)
	solution from reasoner: Female ⊓ (∃ hasChild.Person)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1469: (Male) ⊓ ∃hasChild.(Male)
	solution from reasoner: Male ⊓ (∃ hasChild.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1470: (Male) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1471: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1472: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1473: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: Female ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1474: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1475: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1476: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1477: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1478: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1479: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1480: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1481: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1482: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1483: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1484: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1485: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1486: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1487: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1488: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1489: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1490: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1491: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1492: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1493: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1494: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: Female ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1495: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1496: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1497: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1498: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1499: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1500: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1501: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1502: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1503: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1504: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1505: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1506: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1507: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1508: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1509: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1510: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1511: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1512: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1513: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1514: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1515: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1516: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1517: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1518: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1519: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1520: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1521: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1522: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1523: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1524: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1525: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1526: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1527: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1528: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1529: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1530: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1531: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1532: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1533: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1534: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1535: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1536: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1537: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1538: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1539: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1540: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1541: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1542: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1543: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1544: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1545: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1546: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1547: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1548: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1549: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1550: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1551: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1552: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1553: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1554: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1555: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1556: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1557: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1558: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1559: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1560: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1561: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1562: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1563: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1564: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1565: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1566: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1567: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1568: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1569: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1570: ((Male) ⊔ (Person)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1571: ((Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1572: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1573: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1574: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1575: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1576: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1577: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1578: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1579: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1580: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1581: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1582: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1583: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1584: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1585: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1586: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1587: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1588: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1589: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1590: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1591: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1592: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1593: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1594: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1595: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1596: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1597: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1598: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1599: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1600: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1601: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1602: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1603: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1604: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1605: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1606: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1607: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1608: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1609: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1610: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1611: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1612: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1613: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1614: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1615: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1616: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1617: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1618: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1619: (Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1620: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1621: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1622: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1623: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1624: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1625: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1626: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1627: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1628: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1629: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1630: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1631: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1632: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1633: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1634: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1635: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1636: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1637: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1638: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1639: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1640: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1641: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1642: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1643: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1644: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1645: (Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1646: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1647: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1648: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1649: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1650: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1651: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1652: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1653: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1654: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1655: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1656: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1657: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1658: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1659: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1660: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1661: (Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1662: ((Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1663: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1664: (Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1665: ((Male) ⊔ (Person)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1666: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1667: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1668: (Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1669: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1670: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1671: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1672: ((Person) ⊔ (Male) ⊔ (Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182
solution 1673: (Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.1
	 f_measure: 0.18181818181818182

Total solutions found: 1673

Program finished.
Program ends at: 09.04.2018  04.30.56 AM
Program duration: 0.241 sec
