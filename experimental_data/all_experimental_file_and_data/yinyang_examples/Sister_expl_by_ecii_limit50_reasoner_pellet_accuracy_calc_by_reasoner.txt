Program started.............
Program starts at: 09.04.2018  04.30.55 AM
Working with confFile: Sister.config
Algorithm starts at: 09.04.2018  04.30.55 AM

User defined parameters:
K1/negExprTypeLimit: 3
K2/hornClauseLimit: 3
K3/objPropsCombinationLimit: 3
K4/hornClausesListMaxSize: 50
K5/candidateClassesListMaxSize: 50
ReasonerName: pellet
posIndivs from conf:
	Valentina
	Marisella
	Ombretta
	Giovanna
	Nella
	Maria
	Miriam
	Rosanna
	Milly
	Serena
	Antonella
negIndivs from conf:
	Francesco
	Mauro
	Carmela
	Dino
	Luigi
	Giuseppe

Algorithm ends at: 09.04.2018  04.30.55 AM

Algorithm duration: 0.139 sec

####################Solutions####################:
solution 1: (( ¬ Male) ⊔ (Female))
	solution from reasoner: Female ⊔ (¬Male)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 0.7058823529411765
	 f_measure: 0.9565217391304348
	 f_measure_by_reasoner: 0.8148148148148148
solution 2: (( ¬ Male) ⊔ (Person))
	solution from reasoner: Person ⊔ (¬Male)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 1.0
	 f_measure: 0.9565217391304348
	 f_measure_by_reasoner: 1.0
solution 3: ((Person) ⊔ ( ¬ Male) ⊔ (Female))
	solution from reasoner: Female ⊔ Person ⊔ (¬Male)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 1.0
	 f_measure: 0.9565217391304348
	 f_measure_by_reasoner: 1.0
solution 4: (( ¬ Male) ⊔ (Person ⊓ ¬ Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊔ (¬Male)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 0.0
	 f_measure: 0.9565217391304348
	 f_measure_by_reasoner: 0.0
solution 5: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male))
	solution from reasoner: Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)
	 coverage_score: 0.9411764705882353
	 f_measure: 0.9565217391304348
solution 6: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male))
	solution from reasoner: Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)
	 coverage_score: 0.9411764705882353
	 f_measure: 0.9565217391304348
solution 7: (Person)
	solution from reasoner: Person
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 8: ∃hasSibling.(Person)
	solution from reasoner: ∃ hasSibling.Person
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 9: (Female)
	solution from reasoner: Female
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 10: ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 11: (Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 12: (Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 13: ((Female) ⊔ (Person))
	solution from reasoner: Female ⊔ Person
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 14: ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Male)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 15: ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ∃ hasSibling.(Male ⊔ Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 16: (Person ⊓ ¬ Male)
	solution from reasoner: Person ⊓ (¬Male)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 17: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 18: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 19: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 20: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 21: ((Female) ⊔ (Person ⊓ ¬ Male))
	solution from reasoner: Female ⊔ (Person ⊓ (¬Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 22: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 23: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 24: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 25: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 26: ((Person) ⊔ (Person ⊓ ¬ Male))
	solution from reasoner: Person ⊔ (Person ⊓ (¬Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 27: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 28: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 29: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 30: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 31: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 32: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male))
	solution from reasoner: Female ⊔ Person ⊔ (Person ⊓ (¬Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 33: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 34: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 35: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 36: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 37: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 38: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 39: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 40: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 41: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 42: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 43: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 44: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 45: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 46: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 47: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 48: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 49: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 50: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 51: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 52: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 53: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 54: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 55: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 56: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 57: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 58: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 59: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 60: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 61: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 62: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 63: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 64: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 65: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 66: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 67: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 68: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 69: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 70: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 71: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 72: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 73: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 74: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 75: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 76: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 77: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 78: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 79: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 80: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 81: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 82: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 83: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.6470588235294118
	 f_measure: 0.7857142857142858
solution 84: ∃hasSibling.(Female)
	solution from reasoner: ∃ hasSibling.Female
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 85: (Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 86: (Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 87: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 88: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 89: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 90: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 91: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 92: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 93: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 94: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 95: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 96: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 97: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.5882352941176471
	 f_measure: 0.7407407407407406
solution 98: ∃hasParent.(Male)
	solution from reasoner: ∃ hasParent.Male
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 99: ∃hasParent.(Female)
	solution from reasoner: ∃ hasParent.Female
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 100: ∃hasParent.(Person)
	solution from reasoner: ∃ hasParent.Person
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 101: (Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 102: ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 103: (Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 104: (Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 105: ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ∃ hasParent.(Female ⊔ Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 106: ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 107: ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ∃ hasParent.(Male ⊔ Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 108: (Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 109: (Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 110: (Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 111: ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 112: ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ∃ hasParent.(Female ⊔ Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 113: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 114: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 115: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 116: (Person ⊓ ¬ Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 117: ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 118: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 119: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 120: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 121: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 122: ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ∃ hasParent.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 123: (Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 124: ((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 125: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 126: (Person ⊓ ¬ Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 127: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 128: (Person ⊓ ¬ Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 129: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 130: ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 131: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 132: (Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 133: ((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 134: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 135: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 136: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 137: (Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 138: (Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 139: ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 140: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 141: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 142: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 143: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 144: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 145: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 146: (Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 147: (Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 148: ((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 149: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 150: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 151: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 152: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 153: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 154: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 155: (Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 156: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 157: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 158: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 159: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 160: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 161: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 162: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 163: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 164: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 165: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 166: ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 167: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 168: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 169: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 170: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 171: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 172: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 173: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 174: (Person ⊓ ¬ Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 175: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 176: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 177: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 178: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 179: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 180: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 181: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 182: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 183: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 184: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 185: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 186: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 187: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 188: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 189: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 190: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 191: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 192: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 193: (Person ⊓ ¬ Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 194: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 195: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 196: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 197: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 198: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 199: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 200: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 201: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 202: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 203: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 204: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 205: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 206: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 207: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 208: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 209: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 210: (Person ⊓ ¬ Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 211: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 212: (Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 213: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 214: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 215: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 216: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 217: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 218: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 219: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 220: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 221: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 222: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 223: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 224: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 225: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 226: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 227: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 228: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 229: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 230: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 231: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 232: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 233: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 234: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 235: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 236: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 237: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 238: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 239: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 240: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 241: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 242: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 243: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 244: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 245: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 246: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 247: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 248: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 249: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 250: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 251: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 252: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 253: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 254: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 255: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 256: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 257: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 258: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 259: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 260: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 261: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 262: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 263: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 264: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 265: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 266: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 267: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 268: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 269: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 270: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 271: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 272: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 273: (Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 274: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 275: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 276: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 277: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 278: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 279: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 280: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 281: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 282: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 283: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 284: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 285: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 286: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 287: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 288: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 289: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 290: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 291: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 292: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 293: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 294: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 295: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 296: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 297: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 298: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 299: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 300: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 301: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 302: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 303: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 304: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 305: ((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 306: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 307: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 308: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 309: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 310: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 311: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 312: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 313: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 314: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 315: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 316: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 317: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 318: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 319: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 320: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 321: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 322: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 323: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 324: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 325: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 326: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 327: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 328: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 329: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 330: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 331: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 332: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 333: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 334: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 335: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 336: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 337: (Person ⊓ ¬ Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 338: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 339: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 340: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 341: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 342: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 343: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 344: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 345: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 346: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 347: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 348: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 349: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 350: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 351: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 352: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 353: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 354: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 355: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 356: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 357: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 358: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 359: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 360: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 361: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 362: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 363: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 364: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 365: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 366: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 367: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 368: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 369: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 370: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 371: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 372: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 373: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 374: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 375: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 376: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 377: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 378: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 379: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 380: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 381: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 382: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 383: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 384: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 385: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 386: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 387: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 388: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 389: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 390: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 391: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 392: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 393: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 394: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 395: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 396: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 397: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 398: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 399: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 400: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 401: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 402: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 403: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 404: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 405: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 406: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 407: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 408: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 409: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 410: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 411: (Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 412: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 413: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 414: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 415: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 416: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 417: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 418: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 419: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 420: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 421: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 422: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 423: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 424: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 425: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 426: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 427: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 428: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 429: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 430: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 431: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 432: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 433: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 434: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 435: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 436: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 437: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 438: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 439: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 440: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 441: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 442: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 443: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 444: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 445: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 446: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 447: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 448: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 449: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 450: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 451: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 452: (Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 453: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 454: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 455: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 456: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 457: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 458: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 459: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 460: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 461: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 462: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 463: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 464: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 465: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 466: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 467: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 468: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 469: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 470: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 471: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 472: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 473: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 474: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 475: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 476: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 477: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 478: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 479: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 480: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 481: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 482: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 483: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 484: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 485: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 486: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 487: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 488: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 489: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 490: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 491: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 492: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 493: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 494: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 495: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 496: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 497: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 498: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 499: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 500: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 501: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 502: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 503: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 504: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 505: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 506: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 507: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 508: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 509: (Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 510: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 511: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 512: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 513: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 514: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 515: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 516: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 517: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 518: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 519: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 520: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 521: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 522: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 523: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 524: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 525: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 526: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 527: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 528: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 529: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 530: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 531: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 532: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 533: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 534: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 535: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 536: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 537: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 538: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 539: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 540: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 541: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 542: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 543: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 544: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 545: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 546: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 547: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 548: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 549: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 550: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 551: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 552: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 553: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 554: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 555: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 556: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 557: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 558: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 559: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 560: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 561: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 562: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 563: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 564: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 565: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 566: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 567: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 568: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 569: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 570: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 571: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 572: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 573: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 574: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 575: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 576: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 577: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 578: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 579: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 580: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 581: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 582: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 583: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 584: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 585: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 586: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 587: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 588: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 589: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 590: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 591: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 592: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 593: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 594: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 595: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 596: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 597: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 598: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 599: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 600: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 601: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 602: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 603: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 604: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 605: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 606: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 607: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 608: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 609: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 610: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 611: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 612: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 613: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 614: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 615: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 616: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 617: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 618: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 619: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 620: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 621: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 622: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 623: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 624: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 625: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 626: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 627: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 628: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 629: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 630: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 631: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 632: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 633: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 634: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 635: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 636: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 637: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 638: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 639: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 640: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 641: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 642: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 643: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 644: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 645: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 646: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 647: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 648: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 649: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 650: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 651: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 652: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 653: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 654: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 655: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 656: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 657: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 658: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 659: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 660: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 661: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 662: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 663: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 664: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 665: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 666: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 667: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 668: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 669: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 670: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 671: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 672: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 673: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 674: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 675: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 676: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 677: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 678: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 679: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 680: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 681: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 682: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 683: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 684: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 685: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.5294117647058824
	 f_measure: 0.6923076923076923
solution 686: ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 687: ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 688: ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 689: ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 690: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 691: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 692: ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 693: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 694: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 695: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 696: ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 697: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 698: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 699: ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 700: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 701: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 702: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 703: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 704: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 705: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 706: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 707: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 708: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 709: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 710: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 711: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 712: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 713: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 714: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 715: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 716: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 717: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 718: (Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 719: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 720: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 721: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 722: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 723: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 724: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 725: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 726: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 727: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 728: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 729: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 730: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 731: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 732: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 733: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 734: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 735: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 736: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 737: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 738: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 739: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 740: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 741: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 742: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 743: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 744: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 745: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 746: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 747: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 748: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 749: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 750: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 751: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 752: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 753: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 754: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 755: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 756: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 757: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 758: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 759: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 760: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 761: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 762: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 763: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 764: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 765: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 766: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 767: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 768: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 769: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 770: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 771: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 772: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 773: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 774: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 775: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 776: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 777: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 778: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 779: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 780: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 781: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 782: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 783: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.47058823529411764
	 f_measure: 0.64
solution 784: ( ¬ Male)
	solution from reasoner: ¬Male
	 coverage_score: 0.29411764705882354
	 f_measure: 0.0
solution 785: ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: ∃ hasChild.(Male ⊔ (¬Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.14285714285714288
solution 786: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: ∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.14285714285714288
solution 787: ∃hasSibling.(Male)
	solution from reasoner: ∃ hasSibling.Male
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 788: ∃hasChild.( ¬ Person)
	solution from reasoner: ∃ hasChild.(¬Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.0
solution 789: (Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Female ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 790: (Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 791: ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: ∃ hasChild.(Male ⊔ (¬Female))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 792: ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: ∃ hasChild.((¬Female) ⊔ (¬Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.0
solution 793: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 794: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 795: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 796: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 797: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 798: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 799: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 800: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 801: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 802: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 803: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 804: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 805: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 806: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 807: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 808: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 809: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.380952380952381
solution 810: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 811: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 812: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 813: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 814: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 815: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 816: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 817: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 818: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 819: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 820: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 821: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.13333333333333333
solution 822: ∃hasChild.( ¬ Female)
	solution from reasoner: ∃ hasChild.(¬Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 823: ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 824: ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 825: ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 826: ( ¬ Male) ⊓ ∃hasChild.( ¬ Person)
	solution from reasoner: (¬Male) ⊓ (∃ hasChild.(¬Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 827: ( ¬ Male) ⊓ ∃hasChild.( ¬ Female)
	solution from reasoner: (¬Male) ⊓ (∃ hasChild.(¬Female))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 828: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.( ¬ Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 829: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 830: ( ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (¬Male) ⊓ (∃ hasChild.((¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 831: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 832: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.( ¬ Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 833: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.( ¬ Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Female))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 834: ( ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (¬Male) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 835: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 836: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 837: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 838: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.( ¬ Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Female))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 839: ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 840: ( ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (¬Male) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 841: ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 842: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 843: ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 844: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.( ¬ Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Female))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 845: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 846: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 847: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 848: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.( ¬ Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 849: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 850: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 851: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 852: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 853: ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 854: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.( ¬ Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Female))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 855: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 856: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 857: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasChild.((¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 858: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 859: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 860: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasChild.((¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 861: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 862: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.( ¬ Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 863: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 864: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 865: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 866: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 867: ( ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (¬Male) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 868: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 869: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 870: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasChild.((¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 871: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 872: (Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 873: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 874: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 875: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 876: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 877: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.( ¬ Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Female))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 878: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.((¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 879: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 880: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 881: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 882: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 883: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 884: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 885: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 886: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 887: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 888: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 889: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 890: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 891: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 892: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.( ¬ Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 893: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 894: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 895: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 896: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 897: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.( ¬ Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Female))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 898: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 899: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 900: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 901: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.( ¬ Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.(¬Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 902: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 903: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 904: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 905: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 906: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.((¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 907: (Person ⊓ ¬ Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 908: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 909: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 910: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 911: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 912: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 913: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 914: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 915: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 916: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 917: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 918: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 919: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 920: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 921: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 922: ((Female) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 923: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 924: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.((¬Female) ⊔ (¬Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.0
solution 925: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 926: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 927: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 928: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 929: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 930: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 931: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 932: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 933: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 934: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 935: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 936: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 937: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 938: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 939: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 940: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 941: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 942: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 943: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 944: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 945: ∃hasChild.(Male)
	solution from reasoner: ∃ hasChild.Male
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 946: (Female) ⊓ ∃hasChild.(Male)
	solution from reasoner: Female ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 947: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 948: ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 949: ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 950: (Person) ⊓ ∃hasChild.(Male)
	solution from reasoner: Person ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 951: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 952: ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 953: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 954: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 955: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 956: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 957: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 958: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 959: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 960: ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 961: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 962: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 963: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 964: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 965: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 966: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 967: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 968: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 969: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 970: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 971: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 972: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 973: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: Female ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 974: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 975: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 976: ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 977: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 978: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 979: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 980: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 981: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 982: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 983: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 984: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 985: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 986: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 987: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 988: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 989: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 990: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 991: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 992: ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 993: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 994: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 995: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 996: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 997: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 998: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 999: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1000: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1001: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1002: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1003: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1004: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1005: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1006: ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1007: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1008: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1009: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1010: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1011: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1012: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1013: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1014: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1015: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1016: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1017: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1018: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1019: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1020: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1021: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1022: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1023: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1024: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1025: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1026: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1027: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1028: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1029: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1030: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1031: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1032: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1033: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1034: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1035: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1036: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1037: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1038: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1039: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1040: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1041: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1042: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1043: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1044: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1045: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1046: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1047: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1048: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1049: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1050: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1051: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1052: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1053: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1054: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1055: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1056: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1057: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1058: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1059: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1060: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1061: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1062: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1063: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1064: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1065: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1066: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1067: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1068: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1069: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1070: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1071: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1072: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1073: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1074: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1075: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: Female ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1076: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1077: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1078: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1079: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1080: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1081: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: Person ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1082: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1083: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1084: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1085: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1086: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1087: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1088: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1089: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1090: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1091: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1092: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1093: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1094: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1095: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1096: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1097: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1098: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1099: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1100: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1101: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1102: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1103: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1104: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1105: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1106: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1107: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1108: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1109: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1110: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1111: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1112: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1113: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1114: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1115: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1116: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1117: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1118: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1119: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1120: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1121: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1122: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1123: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1124: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1125: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1126: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1127: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1128: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1129: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1130: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1131: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1132: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1133: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1134: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1135: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1136: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1137: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1138: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1139: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1140: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1141: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1142: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1143: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1144: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1145: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1146: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1147: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1148: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1149: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1150: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1151: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1152: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1153: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1154: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1155: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1156: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1157: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1158: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1159: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1160: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1161: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1162: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1163: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1164: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1165: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1166: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1167: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1168: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1169: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1170: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ Person) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1171: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1172: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1173: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1174: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1175: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1176: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1177: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1178: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1179: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1180: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1181: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1182: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1183: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1184: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1185: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1186: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1187: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1188: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1189: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1190: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1191: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1192: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1193: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1194: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1195: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1196: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1197: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1198: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1199: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1200: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1201: (Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1202: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1203: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1204: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1205: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1206: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1207: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1208: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1209: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1210: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1211: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1212: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1213: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1214: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1215: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1216: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1217: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1218: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1219: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1220: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1221: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1222: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1223: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1224: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1225: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1226: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1227: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1228: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1229: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1230: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1231: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1232: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1233: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1234: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1235: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1236: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1237: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1238: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1239: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1240: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1241: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1242: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1243: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1244: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1245: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1246: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1247: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1248: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1249: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1250: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1251: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1252: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1253: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1254: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1255: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1256: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1257: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1258: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1259: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1260: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1261: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1262: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1263: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1264: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1265: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1266: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1267: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1268: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1269: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1270: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1271: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1272: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1273: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1274: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1275: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1276: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1277: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1278: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1279: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1280: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1281: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1282: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1283: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1284: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1285: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1286: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1287: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1288: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1289: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1290: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1291: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1292: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1293: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1294: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1295: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1296: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1297: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1298: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1299: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1300: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1301: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1302: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1303: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1304: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1305: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1306: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1307: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1308: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1309: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1310: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1311: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1312: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1313: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1314: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1315: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1316: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1317: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1318: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1319: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1320: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1321: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1322: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1323: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1324: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1325: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1326: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1327: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1328: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1329: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1330: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1331: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1332: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1333: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1334: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1335: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1336: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1337: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1338: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1339: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1340: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1341: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1342: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1343: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1344: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1345: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1346: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1347: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1348: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1349: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1350: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1351: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1352: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1353: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1354: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1355: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1356: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1357: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1358: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1359: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1360: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1361: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1362: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1363: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1364: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1365: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1366: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1367: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1368: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1369: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1370: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1371: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1372: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1373: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1374: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1375: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1376: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1377: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1378: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1379: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1380: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1381: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1382: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1383: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1384: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1385: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1386: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1387: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1388: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1389: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1390: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1391: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1392: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1393: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1394: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1395: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1396: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1397: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1398: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1399: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1400: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1401: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1402: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1403: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1404: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1405: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1406: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1407: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1408: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1409: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1410: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1411: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1412: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1413: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1414: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1415: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1416: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1417: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1418: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1419: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1420: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1421: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1422: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1423: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Female)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1424: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1425: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1426: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1427: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1428: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1429: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1430: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1431: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1432: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1433: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1434: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1435: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1436: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1437: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1438: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1439: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1440: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1441: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1442: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1443: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1444: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1445: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1446: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1447: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1448: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1449: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1450: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1451: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1452: (Person) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1453: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1454: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1455: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1456: (Female) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1457: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1458: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1459: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1460: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1461: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1462: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1463: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1464: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1465: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1466: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1467: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1468: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1469: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1470: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1471: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1472: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1473: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1474: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1475: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1476: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1477: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1478: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1479: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1480: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1481: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1482: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1483: (Female) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1484: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1485: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1486: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1487: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1488: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1489: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1490: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1491: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1492: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1493: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1494: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1495: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1496: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1497: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1498: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1499: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1500: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1501: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1502: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1503: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1504: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1505: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1506: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1507: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1508: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1509: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1510: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1511: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1512: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1513: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1514: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1515: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1516: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1517: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1518: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1519: (Person) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1520: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1521: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1522: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1523: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1524: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1525: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1526: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1527: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1528: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1529: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1530: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1531: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1532: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1533: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1534: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1535: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1536: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1537: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1538: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1539: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1540: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1541: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1542: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1543: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1544: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1545: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1546: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1547: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1548: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1549: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1550: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1551: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1552: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1553: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1554: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1555: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1556: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1557: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1558: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1559: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1560: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1561: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1562: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1563: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1564: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1565: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1566: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1567: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1568: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1569: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1570: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1571: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1572: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1573: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1574: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1575: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1576: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1577: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1578: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1579: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1580: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1581: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1582: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1583: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1584: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1585: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1586: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1587: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1588: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1589: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1590: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1591: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1592: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1593: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1594: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1595: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1596: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1597: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1598: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1599: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1600: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1601: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1602: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1603: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1604: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1605: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1606: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1607: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1608: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1609: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1610: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1611: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1612: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1613: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1614: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1615: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1616: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1617: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1618: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1619: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1620: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1621: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1622: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1623: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1624: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1625: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1626: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1627: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1628: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1629: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1630: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1631: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1632: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1633: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1634: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1635: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1636: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1637: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1638: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1639: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1640: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1641: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1642: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1643: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1644: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1645: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1646: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1647: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1648: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1649: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1650: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1651: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1652: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1653: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1654: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1655: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1656: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1657: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1658: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1659: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1660: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1661: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1662: (Female) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Female ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1663: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1664: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1665: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1666: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1667: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1668: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1669: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1670: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1671: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1672: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1673: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1674: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1675: (Person ⊓ ¬ Male) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1676: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1677: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1678: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1679: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1680: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1681: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1682: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1683: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1684: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1685: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1686: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1687: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1688: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1689: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1690: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1691: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1692: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1693: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1694: (Person) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1695: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1696: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1697: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1698: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1699: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1700: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1701: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1702: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1703: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1704: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1705: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1706: ((Female) ⊔ (Person)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1707: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1708: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1709: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1710: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1711: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1712: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1713: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1714: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1715: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1716: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1717: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1718: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1719: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1720: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1721: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1722: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1723: ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1724: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1725: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1726: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1727: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1728: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1729: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1730: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1731: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1732: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1733: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1734: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1735: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1736: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1737: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1738: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1739: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1740: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1741: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1742: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1743: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1744: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1745: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1746: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1747: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1748: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1749: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1750: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1751: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1752: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1753: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1754: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1755: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1756: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1757: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1758: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1759: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1760: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1761: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1762: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1763: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1764: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1765: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1766: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1767: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1768: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1769: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1770: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1771: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1772: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1773: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1774: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1775: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1776: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1777: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1778: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1779: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1780: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1781: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1782: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1783: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1784: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1785: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1786: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1787: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1788: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1789: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1790: (( ¬ Male) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1791: (Person ⊓ ¬ Male) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1792: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1793: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1794: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1795: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1796: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1797: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1798: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1799: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1800: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1801: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1802: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1803: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1804: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1805: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1806: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1807: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1808: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1809: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1810: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1811: ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1812: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1813: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1814: (( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1815: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1816: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1817: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1818: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1819: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1820: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1821: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1822: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1823: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1824: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1825: ((Female) ⊔ (Person)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1826: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1827: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1828: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1829: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1830: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1831: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1832: ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1833: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1834: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1835: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1836: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1837: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1838: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1839: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1840: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1841: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1842: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1843: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1844: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1845: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1846: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1847: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1848: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1849: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1850: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1851: ((Person) ⊔ ( ¬ Male) ⊔ (Female)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1852: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1853: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1854: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1855: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1856: ((Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1857: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1858: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1859: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1860: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1861: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1862: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1863: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1864: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1865: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.(( ¬ Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1866: ((Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1867: (( ¬ Male) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1868: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1869: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1870: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1871: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1872: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1873: (( ¬ Male) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1874: (( ¬ Male) ⊔ (Female) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ (Person ⊓ (¬Male)) ⊔ (¬Male)) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 1875: ((Female) ⊔ (Person) ⊔ (Person ⊓ ¬ Male)) ⊓ ∃hasChild.((Male) ⊔ ( ¬ Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Female ⊔ Person ⊔ (Person ⊓ (¬Male))) ⊓ ((∃ hasChild.(Male ⊔ (¬Female) ⊔ (¬Person))) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111

Total solutions found: 1875

Program finished.
Program ends at: 09.04.2018  04.30.55 AM
Program duration: 0.288 sec
