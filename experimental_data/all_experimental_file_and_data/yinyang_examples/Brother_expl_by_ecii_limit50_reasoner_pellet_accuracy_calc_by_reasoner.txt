Program started.............
Program starts at: 09.04.2018  04.30.54 AM
Working with confFile: Brother.config
Algorithm starts at: 09.04.2018  04.30.54 AM

User defined parameters:
K1/negExprTypeLimit: 3
K2/hornClauseLimit: 3
K3/objPropsCombinationLimit: 3
K4/hornClausesListMaxSize: 50
K5/candidateClassesListMaxSize: 50
ReasonerName: pellet
posIndivs from conf:
	Francesco
	Mauro
	Dino
	Luigi
	Giuseppe
negIndivs from conf:
	Valentina
	Marisella
	Ombretta
	Luca
	NonnaLina
	Giovanna
	Nella
	Maria
	Rosanna
	Milly
	Serena
	Antonella

Algorithm ends at: 09.04.2018  04.30.54 AM

Algorithm duration: 0.123 sec

####################Solutions####################:
solution 1: ((Person) ⊔ ( ¬ Female))
	solution from reasoner: Person ⊔ (¬Female)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 1.0
	 f_measure: 0.9090909090909091
	 f_measure_by_reasoner: 1.0
solution 2: ((Male) ⊔ ( ¬ Female))
	solution from reasoner: Male ⊔ (¬Female)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 0.35294117647058826
	 f_measure: 0.9090909090909091
	 f_measure_by_reasoner: 0.47619047619047616
solution 3: (( ¬ Female) ⊔ (Person ⊓ ¬ Female))
	solution from reasoner: (Person ⊓ (¬Female)) ⊔ (¬Female)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 0.0
	 f_measure: 0.9090909090909091
	 f_measure_by_reasoner: 0.0
solution 4: (( ¬ Female) ⊔ (Person) ⊔ (Male))
	solution from reasoner: Male ⊔ Person ⊔ (¬Female)
	 coverage_score: 0.9411764705882353
	 coverage_score_by_reasoner: 1.0
	 f_measure: 0.9090909090909091
	 f_measure_by_reasoner: 1.0
solution 5: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female))
	solution from reasoner: Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)
	 coverage_score: 0.9411764705882353
	 f_measure: 0.9090909090909091
solution 6: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female))
	solution from reasoner: Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)
	 coverage_score: 0.9411764705882353
	 f_measure: 0.9090909090909091
solution 7: ( ¬ Female)
	solution from reasoner: ¬Female
	 coverage_score: 0.6470588235294118
	 f_measure: 0.0
solution 8: (Person)
	solution from reasoner: Person
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 9: ∃hasSibling.(Person)
	solution from reasoner: ∃ hasSibling.Person
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 10: (Male)
	solution from reasoner: Male
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 11: (Person ⊓ ¬ Female)
	solution from reasoner: Person ⊓ (¬Female)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 12: ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 13: (Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 14: ((Person) ⊔ (Male))
	solution from reasoner: Male ⊔ Person
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 15: (Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 16: ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Male)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 17: ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ∃ hasSibling.(Male ⊔ Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 18: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 19: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 20: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 21: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 22: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 23: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ∃ hasSibling.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 24: ((Male) ⊔ (Person ⊓ ¬ Female))
	solution from reasoner: Male ⊔ (Person ⊓ (¬Female))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 25: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 26: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 27: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 28: ((Person) ⊔ (Person ⊓ ¬ Female))
	solution from reasoner: Person ⊔ (Person ⊓ (¬Female))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 29: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 30: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 31: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 32: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 33: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 34: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 35: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 36: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 37: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 38: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 39: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female))
	solution from reasoner: Male ⊔ Person ⊔ (Person ⊓ (¬Female))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 40: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 41: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 42: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 43: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 44: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 45: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 46: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 47: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 48: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 49: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 50: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 51: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 52: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 53: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 54: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 55: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 56: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 57: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 58: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 59: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 60: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 61: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 62: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 63: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 64: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 65: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 66: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 67: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 68: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Person)
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 69: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 70: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 71: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 72: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 73: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 74: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 75: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 76: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 77: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 78: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 79: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 80: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 81: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 82: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 83: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 84: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.29411764705882354
	 f_measure: 0.45454545454545453
solution 85: ∃hasParent.(Male)
	solution from reasoner: ∃ hasParent.Male
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 86: ∃hasParent.(Female)
	solution from reasoner: ∃ hasParent.Female
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 87: ∃hasParent.(Person)
	solution from reasoner: ∃ hasParent.Person
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 88: (Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 89: ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 90: (Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 91: (Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 92: ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ∃ hasParent.(Female ⊔ Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 93: ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 94: ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ∃ hasParent.(Male ⊔ Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 95: (Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 96: (Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 97: ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 98: ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ∃ hasParent.(Female ⊔ Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 99: (Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 100: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 101: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 102: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 103: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 104: ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 105: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 106: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 107: ((Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 108: ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ∃ hasParent.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 109: (Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 110: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 111: (Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 112: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 113: (Person ⊓ ¬ Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 114: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 115: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 116: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 117: ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 118: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 119: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 120: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 121: (Person ⊓ ¬ Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 122: ((Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 123: (Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 124: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 125: (Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 126: (Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 127: ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 128: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 129: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 130: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 131: (Person ⊓ ¬ Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 132: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 133: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 134: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 135: (Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 136: ((Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 137: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 138: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 139: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 140: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 141: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 142: (Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 143: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 144: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 145: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 146: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 147: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 148: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 149: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 150: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 151: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 152: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 153: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 154: ((Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 155: (Person ⊓ ¬ Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 156: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 157: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 158: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 159: ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 160: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 161: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 162: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 163: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 164: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 165: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 166: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 167: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 168: ((Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 169: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 170: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 171: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 172: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 173: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 174: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 175: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 176: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 177: ((Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 178: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 179: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 180: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 181: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 182: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 183: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 184: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 185: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 186: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 187: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 188: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 189: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 190: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 191: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 192: (Person ⊓ ¬ Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 193: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 194: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 195: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 196: (Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 197: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 198: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 199: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 200: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 201: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 202: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 203: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 204: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 205: (Person ⊓ ¬ Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 206: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 207: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 208: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 209: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 210: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 211: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 212: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 213: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 214: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 215: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 216: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 217: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 218: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 219: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 220: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 221: ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 222: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 223: (Person ⊓ ¬ Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 224: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 225: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 226: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 227: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 228: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 229: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 230: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 231: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 232: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 233: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 234: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 235: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 236: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 237: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 238: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 239: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 240: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 241: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 242: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 243: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 244: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 245: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 246: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 247: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 248: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 249: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 250: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 251: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 252: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 253: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 254: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 255: (Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 256: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 257: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 258: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 259: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 260: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 261: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 262: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 263: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 264: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 265: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 266: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 267: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 268: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 269: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 270: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 271: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Female)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 272: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 273: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 274: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 275: ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 276: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 277: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 278: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 279: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 280: (Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 281: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 282: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 283: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 284: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 285: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 286: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 287: ((Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 288: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 289: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 290: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 291: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 292: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 293: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 294: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 295: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 296: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 297: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 298: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 299: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 300: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 301: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Person)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 302: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.Male)
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 303: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 304: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 305: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 306: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 307: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 308: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 309: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 310: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 311: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 312: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 313: ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 314: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 315: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 316: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 317: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 318: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 319: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 320: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 321: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 322: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 323: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 324: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 325: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 326: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 327: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 328: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 329: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 330: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 331: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 332: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 333: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 334: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 335: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 336: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 337: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 338: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 339: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 340: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 341: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 342: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 343: (Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 344: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 345: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 346: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 347: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 348: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 349: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 350: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 351: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 352: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 353: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 354: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 355: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 356: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 357: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 358: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 359: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 360: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 361: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 362: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 363: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 364: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 365: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 366: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 367: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 368: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 369: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 370: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 371: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 372: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 373: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 374: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 375: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 376: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 377: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 378: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 379: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 380: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 381: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 382: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 383: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 384: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 385: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 386: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 387: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 388: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 389: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 390: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 391: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 392: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 393: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 394: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 395: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 396: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 397: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 398: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 399: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 400: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 401: ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 402: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 403: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 404: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 405: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 406: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 407: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 408: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 409: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 410: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 411: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 412: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 413: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 414: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 415: (Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 416: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 417: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 418: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 419: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 420: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 421: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 422: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 423: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 424: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 425: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 426: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 427: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 428: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 429: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 430: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 431: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 432: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 433: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 434: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 435: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 436: (Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 437: (Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 438: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 439: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 440: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 441: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 442: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 443: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 444: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 445: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 446: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 447: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 448: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 449: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 450: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 451: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 452: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 453: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 454: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 455: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 456: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 457: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 458: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 459: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 460: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 461: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 462: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 463: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 464: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 465: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 466: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 467: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 468: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 469: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 470: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 471: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 472: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 473: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 474: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 475: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 476: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 477: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 478: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 479: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 480: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 481: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 482: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 483: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 484: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 485: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 486: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 487: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 488: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 489: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 490: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 491: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 492: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 493: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 494: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 495: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 496: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 497: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 498: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 499: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 500: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 501: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 502: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 503: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 504: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 505: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 506: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 507: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 508: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 509: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 510: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 511: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 512: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 513: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 514: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 515: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 516: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 517: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 518: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 519: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 520: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 521: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 522: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 523: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 524: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 525: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 526: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 527: (Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 528: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 529: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 530: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 531: (Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 532: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 533: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 534: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 535: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 536: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 537: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 538: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 539: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 540: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 541: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 542: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 543: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 544: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 545: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 546: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 547: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 548: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 549: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 550: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 551: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 552: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 553: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 554: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 555: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 556: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 557: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 558: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 559: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 560: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 561: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 562: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 563: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 564: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 565: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 566: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 567: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 568: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 569: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 570: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 571: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 572: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 573: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 574: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 575: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 576: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 577: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 578: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 579: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 580: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 581: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 582: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 583: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 584: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 585: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 586: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 587: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 588: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 589: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 590: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 591: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 592: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 593: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 594: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 595: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 596: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 597: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 598: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 599: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 600: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 601: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 602: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 603: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 604: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 605: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 606: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 607: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 608: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 609: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 610: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 611: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 612: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 613: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 614: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 615: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 616: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 617: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 618: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 619: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 620: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 621: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 622: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 623: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 624: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 625: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 626: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 627: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 628: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 629: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 630: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 631: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 632: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 633: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 634: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 635: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 636: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 637: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 638: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 639: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 640: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 641: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 642: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 643: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 644: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 645: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 646: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 647: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 648: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 649: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 650: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 651: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 652: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 653: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 654: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 655: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 656: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 657: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 658: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 659: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 660: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 661: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 662: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 663: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 664: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 665: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 666: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 667: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 668: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 669: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 670: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 671: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 672: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.23529411764705882
	 f_measure: 0.38095238095238093
solution 673: ∃hasSibling.(Male)
	solution from reasoner: ∃ hasSibling.Male
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 674: ∃hasSibling.(Female)
	solution from reasoner: ∃ hasSibling.Female
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 675: ∃hasChild.(Female)
	solution from reasoner: ∃ hasChild.Female
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 676: ∃hasChild.(Person)
	solution from reasoner: ∃ hasChild.Person
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 677: ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: ∃ hasChild.(Female ⊔ Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 678: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 679: (Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 680: (Male) ⊓ ∃hasChild.(Female)
	solution from reasoner: Male ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 681: (Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 682: ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: ∃ hasChild.(Male ⊔ Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 683: (Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 684: (Male) ⊓ ∃hasChild.(Person)
	solution from reasoner: Male ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 685: (Person) ⊓ ∃hasChild.(Female)
	solution from reasoner: Person ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 686: ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: ∃ hasChild.(Female ⊔ Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 687: (Person) ⊓ ∃hasChild.(Person)
	solution from reasoner: Person ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 688: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 689: (Male) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 690: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 691: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 692: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 693: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 694: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 695: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 696: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 697: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 698: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 699: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: Person ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 700: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: Male ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 701: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 702: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 703: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 704: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 705: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 706: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 707: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 708: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: ∃ hasChild.(Female ⊔ Male ⊔ Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 709: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 710: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 711: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 712: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 713: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 714: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 715: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 716: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 717: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 718: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 719: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 720: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 721: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 722: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: Person ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 723: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 724: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 725: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: Male ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 726: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 727: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 728: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 729: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 730: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 731: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 732: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 733: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 734: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 735: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 736: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 737: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 738: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 739: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 740: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 741: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 742: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: Male ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 743: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 744: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 745: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 746: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 747: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 748: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 749: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 750: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 751: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 752: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 753: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 754: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 755: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 756: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 757: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 758: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 759: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 760: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 761: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 762: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 763: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 764: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 765: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 766: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: Person ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 767: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 768: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 769: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 770: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 771: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 772: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 773: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 774: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 775: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 776: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 777: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 778: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 779: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 780: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 781: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 782: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 783: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 784: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 785: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 786: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 787: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 788: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 789: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 790: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 791: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 792: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 793: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 794: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 795: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 796: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 797: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 798: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 799: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 800: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 801: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 802: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 803: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 804: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 805: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 806: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 807: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 808: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 809: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 810: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 811: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 812: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 813: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 814: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 815: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 816: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 817: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 818: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 819: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 820: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 821: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 822: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 823: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 824: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 825: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 826: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 827: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 828: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 829: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 830: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 831: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 832: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 833: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 834: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 835: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 836: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 837: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 838: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 839: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 840: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 841: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 842: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 843: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 844: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 845: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 846: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 847: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 848: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 849: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 850: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 851: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 852: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 853: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 854: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 855: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 856: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 857: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 858: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 859: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 860: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 861: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 862: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 863: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 864: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 865: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 866: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 867: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 868: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 869: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 870: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 871: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 872: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 873: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 874: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 875: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 876: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 877: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 878: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 879: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 880: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Female)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 881: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 882: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 883: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 884: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 885: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 886: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 887: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 888: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 889: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 890: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 891: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 892: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 893: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 894: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasSibling.Male)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 895: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Person)
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 896: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 897: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 898: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 899: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 900: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 901: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 902: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 903: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 904: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 905: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 906: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 907: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 908: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 909: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 910: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 911: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 912: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 913: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 914: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 915: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 916: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 917: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 918: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 919: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 920: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 921: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 922: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 923: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 924: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 925: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 926: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 927: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 928: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 929: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 930: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 931: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 932: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 933: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 934: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 935: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 936: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 937: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 938: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 939: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 940: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 941: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 942: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 943: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 944: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 945: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 946: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 947: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 948: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 949: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 950: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 951: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 952: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 953: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 954: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 955: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 956: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 957: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 958: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 959: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 960: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 961: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 962: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 963: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 964: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 965: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 966: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 967: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 968: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 969: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 970: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 971: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 972: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 973: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 974: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 975: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 976: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 977: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 978: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 979: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 980: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 981: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 982: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 983: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 984: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 985: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 986: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 987: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 988: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 989: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 990: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 991: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 992: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 993: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 994: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 995: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 996: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 997: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 998: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 999: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1000: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1001: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1002: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1003: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1004: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1005: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1006: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1007: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1008: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1009: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1010: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1011: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1012: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1013: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1014: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1015: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1016: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1017: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1018: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1019: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1020: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1021: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1022: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1023: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1024: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1025: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1026: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1027: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1028: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1029: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1030: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1031: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1032: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1033: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1034: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1035: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1036: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1037: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1038: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1039: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1040: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1041: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1042: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1043: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1044: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1045: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1046: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1047: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1048: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1049: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1050: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1051: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1052: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1053: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1054: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1055: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1056: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1057: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1058: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1059: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1060: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1061: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1062: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1063: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1064: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1065: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1066: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1067: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1068: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1069: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1070: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1071: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1072: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1073: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1074: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1075: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1076: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1077: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1078: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1079: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1080: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1081: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1082: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1083: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1084: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1085: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1086: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1087: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1088: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1089: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1090: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1091: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1092: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1093: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1094: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1095: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1096: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1097: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1098: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1099: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1100: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1101: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1102: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1103: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1104: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1105: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1106: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1107: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1108: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1109: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1110: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1111: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1112: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1113: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1114: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1115: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1116: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1117: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1118: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1119: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1120: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1121: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1122: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1123: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1124: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1125: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1126: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1127: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1128: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1129: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1130: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1131: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1132: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1133: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1134: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1135: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1136: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1137: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1138: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1139: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1140: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1141: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1142: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1143: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1144: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1145: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1146: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1147: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1148: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1149: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1150: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1151: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1152: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1153: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1154: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1155: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1156: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1157: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1158: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1159: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1160: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1161: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1162: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1163: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1164: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1165: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1166: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1167: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1168: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1169: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1170: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1171: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1172: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1173: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1174: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1175: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1176: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1177: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1178: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1179: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1180: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1181: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1182: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1183: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1184: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1185: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1186: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1187: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1188: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1189: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1190: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1191: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1192: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1193: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1194: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1195: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1196: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1197: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1198: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1199: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1200: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1201: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1202: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1203: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1204: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.17647058823529413
	 f_measure: 0.3
solution 1205: ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1206: ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1207: ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1208: ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1209: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1210: ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1211: ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1212: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1213: ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1214: ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1215: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1216: ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1217: ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1218: ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1219: ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1220: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1221: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1222: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1223: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1224: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1225: ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1226: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1227: ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1228: ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1229: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1230: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1231: ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1232: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1233: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1234: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1235: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1236: ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1237: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1238: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1239: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1240: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1241: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1242: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1243: ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1244: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1245: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1246: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1247: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1248: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1249: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1250: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1251: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1252: ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1253: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1254: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1255: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1256: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1257: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1258: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1259: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1260: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1261: ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1262: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1263: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1264: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1265: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1266: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1267: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1268: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1269: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1270: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1271: ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1272: ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1273: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1274: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1275: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1276: ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1277: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1278: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1279: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1280: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1281: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1282: ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1283: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1284: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1285: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1286: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1287: ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1288: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1289: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1290: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1291: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1292: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1293: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1294: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1295: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1296: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1297: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1298: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1299: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1300: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1301: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1302: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1303: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1304: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1305: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1306: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1307: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1308: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1309: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1310: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1311: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1312: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1313: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1314: ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1315: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1316: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1317: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1318: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1319: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1320: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1321: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1322: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1323: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1324: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1325: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1326: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1327: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1328: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1329: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1330: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1331: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1332: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1333: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1334: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1335: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1336: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1337: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1338: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1339: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1340: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1341: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1342: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1343: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1344: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1345: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1346: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1347: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1348: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1349: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1350: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1351: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1352: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1353: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1354: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1355: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1356: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1357: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1358: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1359: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1360: ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1361: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1362: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1363: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1364: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1365: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1366: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1367: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1368: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1369: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1370: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1371: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1372: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1373: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1374: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1375: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1376: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1377: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1378: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1379: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1380: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1381: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1382: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1383: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1384: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1385: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1386: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1387: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1388: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1389: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1390: ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1391: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1392: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1393: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1394: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1395: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1396: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1397: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1398: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1399: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1400: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1401: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1402: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1403: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1404: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1405: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1406: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1407: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1408: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1409: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1410: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1411: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1412: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1413: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1414: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1415: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1416: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1417: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1418: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1419: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1420: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1421: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1422: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1423: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1424: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1425: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1426: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1427: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1428: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1429: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1430: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1431: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1432: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1433: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1434: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1435: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1436: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1437: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1438: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1439: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1440: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1441: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1442: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1443: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1444: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1445: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1446: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1447: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1448: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1449: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1450: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1451: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1452: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1453: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1454: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1455: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1456: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1457: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1458: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1459: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1460: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1461: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1462: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1463: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1464: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1465: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1466: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1467: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1468: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1469: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1470: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1471: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1472: (Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1473: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1474: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1475: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1476: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1477: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1478: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1479: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1480: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1481: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1482: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1483: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1484: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1485: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1486: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1487: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1488: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1489: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1490: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1491: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1492: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1493: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1494: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1495: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1496: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1497: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1498: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1499: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1500: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1501: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1502: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1503: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1504: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1505: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1506: ∃hasChild.(Person) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1507: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1508: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1509: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1510: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1511: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1512: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1513: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1514: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1515: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1516: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1517: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1518: (Male) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1519: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1520: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1521: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1522: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1523: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1524: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1525: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1526: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1527: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1528: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1529: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1530: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1531: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1532: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1533: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1534: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1535: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1536: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1537: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1538: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1539: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1540: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1541: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1542: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1543: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1544: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1545: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1546: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1547: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1548: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1549: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1550: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1551: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1552: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1553: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1554: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1555: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1556: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1557: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1558: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1559: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1560: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1561: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1562: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1563: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1564: (Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1565: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1566: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1567: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1568: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1569: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1570: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1571: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1572: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1573: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1574: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1575: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1576: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1577: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1578: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1579: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1580: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1581: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1582: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1583: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1584: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1585: (Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1586: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1587: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1588: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1589: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1590: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1591: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1592: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1593: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1594: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1595: (Male) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1596: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1597: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1598: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1599: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1600: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1601: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1602: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1603: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1604: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1605: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1606: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1607: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1608: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1609: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1610: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1611: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1612: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1613: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1614: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1615: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1616: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1617: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1618: (Person) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1619: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1620: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1621: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1622: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1623: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1624: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1625: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1626: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1627: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1628: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1629: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1630: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1631: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1632: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1633: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1634: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1635: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1636: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1637: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1638: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1639: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1640: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1641: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1642: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1643: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1644: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1645: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1646: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1647: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1648: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1649: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1650: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1651: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1652: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1653: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1654: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1655: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1656: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1657: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1658: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1659: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1660: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1661: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1662: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1663: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1664: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1665: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1666: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1667: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1668: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1669: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1670: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1671: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1672: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1673: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1674: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1675: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1676: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1677: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1678: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1679: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1680: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1681: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1682: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1683: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1684: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1685: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1686: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1687: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1688: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1689: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1690: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1691: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1692: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1693: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1694: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1695: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1696: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1697: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1698: ∃hasChild.(Female) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1699: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1700: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1701: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1702: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1703: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1704: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1705: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1706: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1707: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1708: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1709: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1710: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1711: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1712: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1713: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1714: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1715: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1716: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1717: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1718: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1719: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1720: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1721: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1722: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1723: (Person) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1724: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1725: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1726: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1727: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1728: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1729: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1730: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1731: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1732: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1733: (Male) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1734: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1735: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1736: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1737: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1738: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1739: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1740: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1741: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1742: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1743: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1744: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1745: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1746: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1747: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1748: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1749: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1750: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1751: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1752: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1753: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1754: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1755: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1756: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1757: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1758: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1759: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1760: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1761: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1762: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1763: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1764: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1765: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1766: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1767: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1768: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1769: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1770: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1771: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1772: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1773: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1774: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1775: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1776: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1777: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1778: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1779: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1780: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1781: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1782: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1783: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1784: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1785: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1786: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1787: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1788: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1789: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1790: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1791: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1792: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1793: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1794: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1795: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1796: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1797: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1798: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1799: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1800: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1801: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1802: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1803: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1804: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1805: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1806: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1807: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1808: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1809: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1810: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1811: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1812: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1813: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1814: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1815: (Male) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1816: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1817: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1818: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1819: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1820: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1821: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1822: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1823: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1824: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1825: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1826: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1827: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1828: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1829: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1830: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1831: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1832: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1833: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1834: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1835: (Person ⊓ ¬ Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1836: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1837: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1838: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1839: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1840: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1841: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1842: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1843: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1844: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1845: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1846: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1847: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1848: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1849: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1850: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1851: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1852: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1853: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1854: ∃hasChild.(Female) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1855: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1856: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1857: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1858: (Person) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1859: (Male) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1860: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1861: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1862: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1863: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1864: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1865: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1866: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1867: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1868: ∃hasChild.(Female) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1869: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1870: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1871: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1872: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1873: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1874: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1875: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1876: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1877: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1878: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1879: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1880: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1881: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1882: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1883: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1884: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1885: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1886: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1887: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1888: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1889: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1890: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1891: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1892: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1893: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1894: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1895: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1896: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1897: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1898: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1899: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1900: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1901: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1902: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1903: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1904: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1905: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1906: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1907: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1908: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1909: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1910: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1911: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1912: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1913: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1914: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1915: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1916: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1917: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1918: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1919: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1920: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1921: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1922: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1923: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1924: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1925: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1926: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1927: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1928: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1929: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1930: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1931: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1932: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1933: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1934: ∃hasChild.(Person) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1935: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1936: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1937: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1938: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1939: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1940: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1941: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1942: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1943: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1944: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1945: (Person) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1946: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1947: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1948: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1949: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1950: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1951: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1952: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1953: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1954: ∃hasChild.(Person) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1955: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1956: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1957: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1958: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1959: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1960: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1961: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1962: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1963: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1964: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1965: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1966: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1967: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1968: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1969: ((Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1970: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1971: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1972: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1973: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1974: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1975: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1976: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1977: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1978: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1979: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1980: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1981: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1982: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1983: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1984: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1985: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1986: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1987: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1988: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1989: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1990: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1991: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1992: (Person) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1993: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1994: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1995: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1996: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1997: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1998: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 1999: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2000: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2001: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2002: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2003: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2004: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2005: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2006: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2007: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2008: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2009: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2010: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2011: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2012: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2013: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2014: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2015: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2016: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2017: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2018: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2019: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2020: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2021: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2022: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2023: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2024: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2025: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2026: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2027: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2028: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2029: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2030: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2031: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2032: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2033: (Male) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2034: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2035: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Female) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2036: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2037: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2038: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2039: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2040: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2041: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2042: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2043: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2044: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2045: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2046: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2047: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2048: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2049: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2050: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2051: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2052: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2053: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2054: (Male) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2055: ∃hasChild.(Person) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2056: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2057: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2058: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2059: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2060: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2061: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2062: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2063: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2064: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2065: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2066: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2067: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2068: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2069: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2070: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2071: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2072: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2073: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2074: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2075: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2076: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2077: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2078: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2079: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2080: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2081: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2082: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2083: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2084: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2085: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2086: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2087: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2088: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2089: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2090: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2091: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2092: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2093: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2094: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2095: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2096: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2097: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2098: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2099: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2100: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2101: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2102: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2103: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2104: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2105: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2106: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2107: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2108: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2109: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2110: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2111: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2112: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2113: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2114: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2115: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2116: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2117: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2118: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2119: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2120: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2121: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2122: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2123: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2124: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2125: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2126: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2127: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2128: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2129: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2130: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2131: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2132: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2133: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2134: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2135: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2136: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2137: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2138: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2139: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2140: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2141: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2142: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2143: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2144: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2145: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2146: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2147: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2148: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2149: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2150: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2151: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2152: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2153: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2154: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2155: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2156: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2157: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2158: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2159: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2160: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2161: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2162: (Person) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2163: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2164: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2165: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2166: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2167: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2168: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2169: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2170: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2171: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2172: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2173: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2174: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2175: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2176: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2177: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2178: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2179: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2180: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2181: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2182: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2183: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2184: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2185: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2186: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2187: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2188: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2189: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2190: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2191: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2192: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2193: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2194: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2195: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2196: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2197: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2198: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2199: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2200: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2201: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2202: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2203: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2204: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2205: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2206: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2207: ∃hasChild.(Female) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2208: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2209: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2210: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2211: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2212: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2213: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2214: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2215: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2216: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2217: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2218: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2219: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2220: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2221: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2222: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2223: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2224: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2225: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2226: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2227: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2228: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2229: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2230: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2231: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2232: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2233: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2234: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2235: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2236: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2237: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2238: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2239: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2240: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2241: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2242: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2243: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2244: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2245: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2246: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2247: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2248: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2249: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2250: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2251: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2252: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2253: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2254: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2255: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2256: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2257: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2258: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2259: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2260: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2261: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2262: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2263: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2264: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2265: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2266: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2267: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2268: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2269: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2270: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2271: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2272: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2273: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2274: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2275: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2276: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2277: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2278: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2279: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2280: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2281: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2282: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2283: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2284: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2285: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2286: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2287: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2288: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2289: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2290: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2291: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2292: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2293: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2294: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2295: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2296: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2297: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2298: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2299: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2300: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2301: (Person ⊓ ¬ Female) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2302: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2303: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2304: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2305: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2306: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2307: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2308: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2309: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2310: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2311: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2312: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2313: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2314: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2315: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2316: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2317: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2318: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2319: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2320: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2321: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2322: ((Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2323: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2324: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2325: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2326: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2327: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2328: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2329: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2330: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2331: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2332: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2333: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2334: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2335: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2336: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2337: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2338: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2339: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2340: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2341: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2342: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2343: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2344: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2345: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2346: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2347: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2348: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2349: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2350: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2351: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2352: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2353: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2354: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2355: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2356: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2357: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2358: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2359: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2360: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2361: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2362: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2363: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2364: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2365: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2366: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.11764705882352941
	 f_measure: 0.21052631578947364
solution 2367: ∃hasChild.(Male)
	solution from reasoner: ∃ hasChild.Male
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2368: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2369: ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2370: ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2371: (Person) ⊓ ∃hasChild.(Male)
	solution from reasoner: Person ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2372: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2373: ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2374: (Male) ⊓ ∃hasChild.(Male)
	solution from reasoner: Male ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2375: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2376: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2377: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2378: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2379: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2380: ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2381: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2382: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2383: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2384: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2385: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2386: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2387: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2388: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2389: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2390: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2391: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2392: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2393: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2394: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2395: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2396: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2397: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2398: ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2399: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2400: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2401: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2402: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2403: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2404: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2405: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2406: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2407: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2408: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2409: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2410: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2411: ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2412: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2413: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2414: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2415: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2416: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2417: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2418: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2419: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2420: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2421: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2422: ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2423: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2424: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2425: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2426: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2427: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2428: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2429: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2430: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2431: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2432: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2433: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2434: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2435: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2436: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2437: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2438: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2439: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2440: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2441: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2442: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2443: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2444: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2445: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2446: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2447: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2448: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2449: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2450: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2451: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2452: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2453: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2454: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2455: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2456: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2457: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2458: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2459: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2460: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2461: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2462: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2463: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2464: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2465: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2466: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2467: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2468: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2469: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2470: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2471: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2472: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2473: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2474: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2475: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2476: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2477: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2478: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2479: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2480: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2481: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2482: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2483: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2484: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2485: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2486: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2487: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2488: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2489: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2490: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2491: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2492: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2493: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2494: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2495: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2496: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2497: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2498: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2499: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2500: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2501: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2502: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2503: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2504: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2505: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2506: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2507: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2508: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2509: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2510: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2511: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2512: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2513: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2514: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2515: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2516: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2517: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2518: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2519: ∃hasChild.(Female) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2520: ∃hasChild.(Male) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2521: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2522: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2523: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2524: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2525: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2526: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2527: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2528: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2529: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2530: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2531: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2532: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2533: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2534: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2535: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2536: (Male) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Male ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2537: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2538: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2539: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2540: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2541: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2542: ∃hasChild.(Male) ⊓ ∃hasSibling.(Person) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Person)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2543: ∃hasChild.(Person) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2544: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2545: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2546: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2547: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2548: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2549: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2550: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2551: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2552: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2553: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2554: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2555: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2556: ∃hasChild.(Female) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Female) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2557: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ (∃ hasChild.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2558: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2559: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2560: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2561: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2562: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2563: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2564: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2565: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2566: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2567: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2568: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2569: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Male)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2570: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2571: (Person) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: Person ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2572: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2573: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2574: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2575: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2576: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2577: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2578: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2579: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2580: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2581: ∃hasChild.(Person) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Person) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2582: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2583: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2584: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.(Female)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Female) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2585: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2586: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2587: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2588: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.Person) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2589: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2590: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2591: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2592: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2593: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2594: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2595: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2596: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2597: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2598: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2599: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2600: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2601: ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2602: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2603: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2604: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2605: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2606: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2607: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2608: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2609: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2610: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2611: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2612: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2613: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2614: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2615: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2616: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2617: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2618: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2619: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2620: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2621: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2622: ∃hasChild.((Male) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2623: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2624: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2625: ∃hasChild.((Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2626: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2627: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2628: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2629: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2630: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Person)
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2631: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2632: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2633: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2634: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2635: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2636: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2637: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2638: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2639: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2640: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2641: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2642: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Male)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2643: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Female)
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2644: ∃hasChild.((Person) ⊔ (Female)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2645: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2646: ((Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2647: (Person ⊓ ¬ Female) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊓ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2648: ((Person) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2649: ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2650: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.(Person)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2651: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2652: ((Male) ⊔ ( ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2653: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.(Female)
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.Female))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2654: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2655: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2656: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2657: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2658: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2659: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2660: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2661: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2662: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2663: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2664: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2665: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2666: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Male)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2667: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2668: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2669: ∃hasChild.((Female) ⊔ (Male) ⊔ (Person)) ⊓ ∃hasSibling.(Female) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.Female)
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2670: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2671: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Person) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2672: ((Person) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2673: ((Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2674: ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male)) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2675: (( ¬ Female) ⊔ (Person) ⊔ (Male)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2676: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2677: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2678: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2679: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2680: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2681: (( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: ((Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2682: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Male) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2683: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2684: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2685: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2686: ((Male) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasParent.((Male) ⊔ (Female) ⊔ (Person))
	solution from reasoner: (Male ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasParent.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2687: ((Person) ⊔ ( ¬ Female) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Person ⊔ (Person ⊓ (¬Female)) ⊔ (¬Female)) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111
solution 2688: ((Person) ⊔ (Male) ⊔ (Person ⊓ ¬ Female)) ⊓ ∃hasChild.(Male) ⊓ ∃hasSibling.((Person) ⊔ (Female) ⊔ (Male))
	solution from reasoner: (Male ⊔ Person ⊔ (Person ⊓ (¬Female))) ⊓ ((∃ hasChild.Male) ⊔ (∃ hasSibling.(Female ⊔ Male ⊔ Person)))
	 coverage_score: 0.058823529411764705
	 f_measure: 0.1111111111111111

Total solutions found: 2688

Program finished.
Program ends at: 09.04.2018  04.30.54 AM
Program duration: 0.314 sec
